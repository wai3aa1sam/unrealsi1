
/*
* reference:
* ~ https://github.com/SimpleTalkCpp/workshop-2021-07-unity-shader
*/

#include "/urs_shader/common/urs_shader_common.ush"

struct VertexIn // FVertexFactoryInput
{
    float4 vertex	: ATTRIBUTE0;   // only can use ATTRIBUTE ## N, (POSITION, TEXCOORD0, ...) don't work
    float2 uv		: ATTRIBUTE1;

	uint instanceId : SV_InstanceID;
};

struct PixelIn
{
    float4 vertex	: SV_POSITION;
    float2 uv		: TEXCOORD0;
    float4 color	: COLOR;
};

float4  m_color;
float   m_scale;
float3  m_objPos;

StructuredBuffer<float3> m_particlePosition;
StructuredBuffer<float2> m_particleLifespan;

void VS_main(
        in VertexIn input
        , out PixelIn o
    )
{
    float4  posOs       = input.vertex;
    float2  uv          = input.uv;
    uint    instanceId  = input.instanceId;

    //float2  uv      = input.uv;

    float4 posWs = float4(m_objPos + m_particlePosition[instanceId], 0);

    float4 posVs = mul(View.TranslatedWorldToView, posWs);
    posVs += posOs * m_scale;

    float4 posHcs = mul(View.ViewToClip, posVs);

    float   life    = m_particleLifespan[instanceId].x / m_particleLifespan[instanceId].y;
    if (life <= 0) 
    {
        posHcs = float4(0,0,0,1);
    }
    
    uint    ci      = instanceId % 8;
    float3  color   = saturate(float3(ci & 1, ci & 2, ci & 4));
    float   alpha   = 1 - (1 - life) * (1 - life);
    
    o.vertex    = posHcs;
    o.uv        = uv;
    o.color     = float4(color, alpha);

    o.color     = float4(color, 1);
}

void PS_main(
        PixelIn input
        , out float4 oColor : SV_Target0
    )   
{
    oColor = input.color;
}
