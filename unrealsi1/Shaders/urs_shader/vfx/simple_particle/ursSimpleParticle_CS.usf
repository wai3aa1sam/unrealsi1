
/*
* reference:
* ~ https://github.com/SimpleTalkCpp/workshop-2021-07-unity-shader
*/

#include "/urs_shader/common/urs_shader_common.ush"

float3 m_initVelocity;
float3 m_initVelocityVariant;

float m_initLifespan;
float m_initLifespanVariant;

float m_deltaTime;
float m_gravity;
float m_bounciness;

float4 m_colliderPlane;
float3 m_emitterPos;

int m_activeParticleCount;
int m_newParticleStart;
int m_newParticleEnd;

StructuredBuffer<float3> m_particleNoise;
int m_particleNoiseCount;

RWStructuredBuffer<float3> m_particlePosition;
RWStructuredBuffer<float3> m_particleVelocity;
RWStructuredBuffer<float2> m_particleLifespan; // x: remain, y: total

float3 getNoise(int i)
{
    return m_particleNoise[(uint) i % (uint) m_particleNoiseCount];
}

[numthreads(64, 1, 1)]
void CS_main(uint3 threadId : SV_DispatchThreadID)
{
    int i = (int) threadId.x;

    if (i >= m_activeParticleCount)
        return;

    //m_particlePosition[i] = m_particlePosition[i].xzy;
    //m_particleVelocity[i] = m_particlePosition[i].xzy;
    //m_particleLifespan[i] = m_particleLifespan[i].yx;

    if ((m_newParticleEnd > m_newParticleStart && i >= m_newParticleStart && i < m_newParticleEnd)
	  || (m_newParticleEnd < m_newParticleStart && i < m_newParticleEnd))
    {
	 // new particle
        float3 noise = getNoise(i);
        m_particlePosition[i] = m_emitterPos;
        m_particleVelocity[i] = m_initVelocity + m_initVelocityVariant * noise;

        float life = m_initLifespan + m_initLifespanVariant * noise.x;
        m_particleLifespan[i] = life.xx;
    }
	
    m_particleLifespan[i].x -= m_deltaTime;

    float3 oldVel = m_particleVelocity[i];
    float3 oldPos = m_particlePosition[i];

    float3 newVel = oldVel + float3(0, 0, m_gravity) * m_deltaTime;
    float3 newPos = oldPos + newVel * m_deltaTime;

	 // collision
    float planeD = m_colliderPlane.w;
    float3 N = m_colliderPlane.xyz;

    float oldD = dot(N, oldPos);
    float newD = dot(N, newPos);

    if ((oldD - planeD) * (newD - planeD) < 0)
    {
        float3 moved = newPos - oldPos;
        float movedDis = length(moved);
        float3 V = moved / movedDis;

        float VN = dot(V, N);
        float t = (oldD - planeD) / VN;
        float3 hitPos = oldPos + V * t;

        newVel = reflect(newVel, N) * m_bounciness;
        newPos = hitPos + newVel * m_deltaTime * (movedDis - t);
    }

    m_particlePosition[i] = newPos;
    m_particleVelocity[i] = newVel;
}

