
/*
* reference:
* ~ https://github.com/SimpleTalkCpp/workshop-2021-07-unity-shader
*/

#include "/urs_shader/common/urs_shader_common.ush"

struct VertexIn // FVertexFactoryInput
{
    float4 vertex	: POSITION;
    float2 uv		: TEXCOORD0;
};

struct PixelIn
{
    float4 vertex	: SV_POSITION;
    float2 uv		: TEXCOORD0;
    float4 color	: COLOR;
};

float4 m_color;
float m_scale;

StructuredBuffer<float3> m_particlePosition;
StructuredBuffer<float2> m_particleLifespan;

void VS_main(VertexIn input, uint instance_id : SV_InstanceID, out PixelIn o)
{
    float life = m_particleLifespan[instance_id].x / m_particleLifespan[instance_id].y;
    float alpha = 1 - (1 - life) * (1 - life);

    float4 posWS = 0; // MatrixTranslate(unity_ObjectToWorld) + float4(m_particlePosition[instance_id], 0);
    posWS = float4(m_particlePosition[instance_id], 0);
//				posWS.z += instance_id;

    float4 posVS = 0; // mul(UNITY_MATRIX_V, posWS);
    //posVS += input.vertex * m_scale; // billboard

    //PixelIn o = (PixelIn) 0;
    o.vertex = 0; // mul(UNITY_MATRIX_P, posVS);    // ViewToClip

    if (life <= 0)
    {
        o.vertex = float4(0, 0, 0, 1);
    }

    o.uv = input.uv; // TRANSFORM_TEX(input.uv, _MainTex);
				
    uint ci = instance_id % 8;
    float3 color = saturate(float3(ci & 1, ci & 2, ci & 4));

    //o.color = m_color * float4(color, alpha);
    //o.color = float4(color, alpha);
    
    //PixelIn o = (PixelIn) 0;
    
    //return o;
}

void PS_main(PixelIn input, out float4 oColor : SV_Target0)
{
    //float4 tex = tex2D()
    oColor = input.color;
    //return input.color;
	// OutColor = float4(1.0, 1.0, 1.0, 1.0);
}
